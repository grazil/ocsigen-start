=RPC ppx syntax extension

An ocsigen-start ppx syntax extension that allows to write, in one function, both the
client and server part of your RPC.


==Constructions

Three types of constructions are available to build an RPC:

<<code language="ocaml"|
  let%rpc toto (... : <type>) = ...
>>

Construction to compute an RPC using the {{connected_wrapper}} API.

<<code language="ocaml"|
  let%crpc toto userid (... : <type>) = ...

  let%crpc_opt toto userid_o (... : <type>) = ...
>>

Construction to compute an RPC using the {{connected_rpc}} API.


RPC constructions are only available at top level and cannot be nested.
 The corresponding declaration in {{{.eliomi}}} is located in shared section.

==Restrictions

Your RPC will implicitly compute a client part and a server part. Explicit 
declaration of each argument's monomorphic type of your RPC function will be 
required to allow the JSON translation and communication between the two parts:

<<code language="ocaml"|
let%rpc toto (... : <type>) = ...

>>

In the case of {{crpc}} and {{crpc_opt}}, as you use the {{connected_rpc}} API, 
your first RPC function argument will refer automatically to ther user ID of the 
current session. {{crpc_opt}} annotation refers to the case when the user ID of the current 
session is needed as an optional argument:

<<code language="ocaml"|
let%crpc toto userid (... : <type>) = ...

let%crpc_opt toto userid_o (... : <type>) = ...
>>
